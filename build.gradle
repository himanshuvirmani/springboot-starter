apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.8
version = '1.0'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}")
        classpath("io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE")
    }
}

subprojects {
    apply plugin: 'spring-boot'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    bootRepackage.enabled = false

    test {
        afterTest { desc, result ->
            println "[TEST] ${desc.className} - ${desc.name} : ${result}"
        }
        jvmArgs = ["-noverify"]
    }

    jacocoTestReport {
        group = "Reporting"
        description = "Generate Jacoco coverage reports after running tests"
        additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)

        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(
                        dir: it,
                        exclude: [
                                'com/springboot/template/domain/*',
                                'com/springboot/template/dto/*',
                                'com/springboot/template/enums/*'
                        ]
                )
            })
        }

        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/jacocoHtml"
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    sourceSets {
        generated {
            java {
                srcDirs = ['src/main/generated']
            }
        }
    }

    bootRepackage {
        mainClass = 'com.core.Application'
    }

    springBoot {
        mainClass = 'com.core.Application'
    }

    bootRun {
        addResources = false
    }

    configurations {
        querydslapt
    }

    if (project.hasProperty('prod')) {  //./gradlew -Pprod bootRun
        apply from: '../gradle/profile_prod.gradle'
    } else if (project.hasProperty('fast')) {
        apply from: '../gradle/profile_fast.gradle'
    } else {
        apply from: '../gradle/profile_dev.gradle'
    }

    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/milestone' }
        maven { url 'http://repo.spring.io/snapshot' }
        maven { url 'https://repository.jboss.org/nexus/content/repositories/releases' }
        maven { url 'https://oss.sonatype.org/content/repositories/releases' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'http://repo.maven.apache.org/maven2' }
    }

    dependencies {
        // Codahale Metrics
        compile group: 'com.codahale.metrics', name: 'metrics-annotation', version: '3.0.2'
        compile group: 'com.codahale.metrics', name: 'metrics-core', version: '3.0.2'

        // Spring Boot
        compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: spring_boot_version
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: spring_boot_version
        compile group: 'org.springframework.boot', name: 'spring-boot-loader-tools', version: spring_boot_version
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-logging', version: spring_boot_version
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: spring_boot_version
        compile group: 'org.springframework.boot', name: 'spring-boot-starter', version: spring_boot_version
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-jetty', version: spring_boot_version
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-jersey', version: spring_boot_version
        compile(group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: spring_boot_version) {
            exclude module: 'spring-boot-starter-tomcat'
        }

        // Lombok
        compile group: 'org.projectlombok', name: 'lombok', version: lombok_version

        // Hibernate
        compile group: 'org.hibernate', name: 'hibernate-core', version: '5.0.11.Final'
        compile group: 'org.hibernate', name: 'hibernate-envers'
        compile group: 'org.hibernate', name: 'hibernate-validator', version: '5.2.1.Final'
        compile(group: 'org.hibernate', name: 'hibernate-ehcache', version: '5.0.1.Final') {
            exclude(module: 'ehcache-core')
        }

        // Joda Time
        compile group: 'joda-time', name: 'joda-time', version: joda_time_version
        compile group: 'joda-time', name: 'joda-time-hibernate', version: joda_time_hibernate_version
        compile group: 'org.jadira.usertype', name: 'usertype.core', version: usertype_core_version

        // Apache
        compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
        compile group: 'commons-collections', name: 'commons-collections', version: '3.2.1'

        // Gson
        compile group: 'com.google.code.gson', name: 'gson', version: '1.7.2'

        // QueryDSL
        compile "com.querydsl:querydsl-jpa:4.0.3"
        querydslapt "com.querydsl:querydsl-apt:4.0.3:jpa"

        runtime("com.h2database:h2")
        runtime("mysql:mysql-connector-java")


        // Test
        testCompile group: 'com.jayway.awaitility', name: 'awaitility', version: awaility_version
        testCompile group: 'com.jayway.jsonpath', name: 'json-path'
        testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: spring_boot_version
        testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-jetty', version: spring_boot_version
        testCompile group: 'org.assertj', name: 'assertj-core', version: assertj_core_version
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.mockito', name: 'mockito-core'
        testCompile group: 'org.powermock', name: 'powermock-core', version: '1.6.4'
        testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.4'
        testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.4'
        testCompile group: 'org.hamcrest', name: 'hamcrest-library'

    }

    task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
        source = sourceSets.main.java
        classpath = configurations.compile + configurations.querydslapt
        options.compilerArgs = [
                "-proc:only",
                "-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
        ]
        destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
    }
    
    compileJava {
        dependsOn generateQueryDSL
        source generateQueryDSL.destinationDir
    }

    compileGeneratedJava {
        dependsOn generateQueryDSL
        options.warnings = false
        classpath += sourceSets.main.runtimeClasspath
    }

    idea {
        module {
            sourceDirs += file('src/main/generated')
        }
    }

    configurations {
        all*.exclude group: 'log4j', module: 'log4j'
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        all*.exclude group: 'org.slf4j', module: 'slf4j-jdk14'
        all*.exclude group: 'org.slf4j', module: 'slf4j-simple'
        all*.exclude group: 'org.jadira.usertype', module: 'usertype.jodatime'
    }

}

allprojects {
    task hello << {
        task ->
            println "++++++++++++++++++++++++\n" +
                    "PROJECT $task.project.name \n" +
                    "VERSION ${version} \n" +
                    "BUILD DIR $task.project.buildDir \n" +
                    "++++++++++++++++++++++++"
    }
    apply plugin: 'idea'
}

